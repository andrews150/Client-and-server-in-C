#include <arpa/inet.h>
#include <linux/if_packet.h>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <sys/ioctl.h>
#include <sys/socket.h>
#include <netinet/ether.h>
#include <net/if.h>
#include <linux/if.h>

#define BUF_SIZ		65536
#define SEND 0
#define RECV 1

void send_message(char *interfaceName, int hwAddress[], char message[]){
	int send_socket, i, textlen = 0, j = 0;
	char *if_name, buf_data[BUF_SIZ];
	struct ifreq if_idx, if_MACaddr;
	struct ethhdr *ethhead;
	struct sockaddr_ll sk_addr; 

	//Open a Raw Socket
	send_socket = socket(AF_PACKET, SOCK_RAW, IPPROTO_RAW);
	if(send_socket < 0)
	{
		printf("Error: Send - Socket\n");
		return;
	}

	//get hardware address 
	if_name = (char *) malloc(sizeof(interfaceName));
	//cut off empty char
	memset(if_name, 0, sizeof(interfaceName));
	strcpy(if_name, interfaceName);

	memset(&if_idx, 0, sizeof(struct ifreq));
	strncpy(if_idx.ifr_name, if_name, IFNAMSIZ-1);

	//Assign socket a specifc interface index
	if((ioctl(send_socket, SIOCGIFINDEX, &if_idx)< 0))
	{
		printf("ERROR: SIOCGIFINDEX\n");
		return;
	}

	memset(buf_data,0, BUF_SIZ);
	ethhead = (struct ethhdr *)(buf_data);

	//Set ethernet headder as MAC address
	for (i = 0; i < ETH_ALEN; i++)
	{
		ethhead->h_source[i] = (unsigned char)(if_MACaddr.ifr_hwaddr.sa_data[i]);
	}

	memset(&if_MACaddr, 0, sizeof(struct ifreq));
	strncpy(if_MACaddr.ifr_name, if_name, IFNAMSIZ-1);

	//Get MAC address of interface to specify source
	if((ioctl(send_socket, SIOCGIFHWADDR, &if_MACaddr))< 0)
	{
		printf("ERROR: SIOCGIFHWADDR\n");
		return;
	}

	//Set the destination MAC in ethernet headder
	for(i = 0; i < ETH_ALEN; i++)
	{
		ethhead->h_dest[i] = hwAddress[i];
	}

	//Set the ethernet type
	ethhead->h_proto = htons(ETH_P_IP);
	textlen += sizeof(struct ethhdr);

	//Send message to the data buf
	while (message[j] != '\0')
	{
		buf_data[textlen++] = message[j];
		j++;
	}

	//index
	sk_addr.sll_ifindex = if_idx.ifr_ifindex;
	//address length
	sk_addr.sll_halen = ETH_ALEN;
	
	//Set destination MAC address
	for(i = 0; i <ETH_ALEN; i++)
	{
		sk_addr.sll_addr[i] = hwAddress[i];
	}

	//send message
	if(sendto(send_socket, buf_data, textlen, 0, (struct sockaddr*)&sk_addr, sizeof(struct sockaddr_ll)) < 0)
	{
		printf("Message did NOT send...\n");
	} 

	printf("Send successful...\n");
	//free the buffer
	free(if_name);
}

void recv_message(char* interface){
	int sock_rec, ethhdrlen;
	struct sockaddr sk_addr;
	unsigned char *buf = (unsigned char *) malloc(BUF_SIZ);

	sock_rec = socket(AF_PACKET, SOCK_RAW, htons(ETH_P_IP));
	if(sock_rec < 0)
	{
		printf("Error: Recieve - Socket\n");
		return;
	}

	printf("Listening for Message...\n");

	while(recvfrom(sock_rec, buf, BUF_SIZ, 0, &sk_addr, (socklen_t *) sizeof(struct sockaddr)) == 0)
	{
		//Do nothing
	}

	printf("Signal recieved\n");

	//Save ethernet headder
	struct ethhdr *ether = (struct ethhdr *) (buf); 
	ethhdrlen = sizeof(struct ethhdr);

	//Playback message
	unsigned char *mes = (buf + ethhdrlen);
	printf("Message reads: %s\n", mes);
	free(buf);
}

int main(int argc, char *argv[])
{
	int mode;
	char hw_addr[6];
	char interfaceName[IFNAMSIZ];
	char buf[BUF_SIZ];
	memset(buf, 0, BUF_SIZ);
	
	int correct=0;
	if (argc > 1){
		if(strncmp(argv[1],"Send", 4)==0){
			if (argc == 5){
				mode=SEND; 
				sscanf(argv[3], "%hhx:%hhx:%hhx:%hhx:%hhx:%hhx", &hw_addr[0], &hw_addr[1], &hw_addr[2], &hw_addr[3], &hw_addr[4], &hw_addr[5]);
				strncpy(buf, argv[4], BUF_SIZ);
				correct=1;
				printf("  buf: %s\n", buf);
			}
		}
		else if(strncmp(argv[1],"Recv", 4)==0){
			if (argc == 3){
				mode=RECV;
				correct=1;
			}
		}
		strncpy(interfaceName, argv[2], IFNAMSIZ);
	 }
	 if(!correct){
		fprintf(stderr, "./455_proj2 Send <InterfaceName>  <DestHWAddr> <Message>\n");
		fprintf(stderr, "./455_proj2 Recv <InterfaceName>\n");
		exit(1);
	 }

	//Do something here

	if(mode == SEND){
		send_message(interfaceName, hw_addr, buf);
	}
	else if (mode == RECV){
		recv_message(interfaceName);
	}

	return 0;
}

